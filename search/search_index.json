{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Use Case Tree Method \u00b6 Your enterprise embarked upon a strategic innovative journey towards establishing a full scale Enterprise Knowledge Graph (EKG) in order to be able to: implement use cases that enable more foundational data quality for your enterprise\u2019s business processes, be more easily compliant with regulations and enable strategic use cases that create a competitive advantage. The key artifact in the development of an EKG is \"the Use Case Tree\": The Use Case Tree is the EKG's equivalent of a long term data strategy and business capability plan. The Use Case Tree is the high-level requirements overview, scoping and dependency model. It gives a mile wide, inch deep view of business capabilities. Traditionally, data strategy, architecture and models i.e. specifications of business requirements on one side and technology and software, i.e. functionality on the other side, are separate. They are concerns of different departments; different groups of specialists think about these concepts in their own way and have their own practices and models for it. For any given development of a business capability that is supported by technology, different groups of people, often across many departments, will get involved and they all have their own way of looking at it. There is no shared language, not one single artifact that they can all talk to and reason about. The Use Case Tree is that single artifact. It provides one single construct, owned by the business , and primarily driven by business strategy, that every group of people, every specialist, can relate their way of thinking to. This includes not only data and technology specialists but also project managers, financial managers, security and compliance officers, operations engineers and so forth. All their models and different ways of looking at a given capability can be plugged into the Use Case Tree as different views. Everything we ever do in a business, especially in the data and technology pillars of that enterprise, should be related to a use case in the Use Case Tree. The Use Case Tree is a breakdown of strategic planned-for capabilities into smaller building blocks, all called use cases. Strategic long term use cases such as Enterprise Risk Management or Client 360 are broken down into smaller use cases that can (and should) be done first. Each use case is a module \u2014 an EKG-component so you will \u2014 a building block with which other use cases can be constructed. The Use Case Tree Method is a practice that has been developed and used for many EKG use cases that are running in production. The primary reasons for creating a Use Case Tree are: Know what the Business wants Bridge the Gap Manage Expectations Enable Reuse Avoid \"boiling the ocean\" Capture Knowledge Avoid Disruption Increase Quality","title":"Use Case Tree Method"},{"location":"#use-case-tree-method","text":"Your enterprise embarked upon a strategic innovative journey towards establishing a full scale Enterprise Knowledge Graph (EKG) in order to be able to: implement use cases that enable more foundational data quality for your enterprise\u2019s business processes, be more easily compliant with regulations and enable strategic use cases that create a competitive advantage. The key artifact in the development of an EKG is \"the Use Case Tree\": The Use Case Tree is the EKG's equivalent of a long term data strategy and business capability plan. The Use Case Tree is the high-level requirements overview, scoping and dependency model. It gives a mile wide, inch deep view of business capabilities. Traditionally, data strategy, architecture and models i.e. specifications of business requirements on one side and technology and software, i.e. functionality on the other side, are separate. They are concerns of different departments; different groups of specialists think about these concepts in their own way and have their own practices and models for it. For any given development of a business capability that is supported by technology, different groups of people, often across many departments, will get involved and they all have their own way of looking at it. There is no shared language, not one single artifact that they can all talk to and reason about. The Use Case Tree is that single artifact. It provides one single construct, owned by the business , and primarily driven by business strategy, that every group of people, every specialist, can relate their way of thinking to. This includes not only data and technology specialists but also project managers, financial managers, security and compliance officers, operations engineers and so forth. All their models and different ways of looking at a given capability can be plugged into the Use Case Tree as different views. Everything we ever do in a business, especially in the data and technology pillars of that enterprise, should be related to a use case in the Use Case Tree. The Use Case Tree is a breakdown of strategic planned-for capabilities into smaller building blocks, all called use cases. Strategic long term use cases such as Enterprise Risk Management or Client 360 are broken down into smaller use cases that can (and should) be done first. Each use case is a module \u2014 an EKG-component so you will \u2014 a building block with which other use cases can be constructed. The Use Case Tree Method is a practice that has been developed and used for many EKG use cases that are running in production. The primary reasons for creating a Use Case Tree are: Know what the Business wants Bridge the Gap Manage Expectations Enable Reuse Avoid \"boiling the ocean\" Capture Knowledge Avoid Disruption Increase Quality","title":"Use Case Tree Method"},{"location":"concept/concept/","text":"Concept \u00b6 For every given Use Case we want to start with capturing the concepts and terms that the user or \"the business\" uses or wants to use. Most of these concepts and their terms will be pre-defined in all kinds of vocabularies but for brand-new use cases in a new domain concepts and their terms will have to be created. classDiagram direction RL class Concept { - type : ConceptType } class UseCase { - vocabulary: Vocabulary - stories: Story[] } link UseCase \"../use-case/\" UseCase --> UseCase : requires Vocabulary \"*\" --> \"*\" Concept Vocabulary \"*\" --> \"*\" Term Story --> \"*\" Concept : input Story --> \"*\" Concept : output Term --> \"1..*\" Concept %% Concept --> OntologyAxiom Vocabulary <--> Concept UseCase --> \"1..*\" Story Persona --|> Concept Concept --> Concept : broader Concept --> Term : preferred UseCase --> \"1\" Vocabulary : use case vocabulary","title":"Concept"},{"location":"concept/concept/#concept","text":"For every given Use Case we want to start with capturing the concepts and terms that the user or \"the business\" uses or wants to use. Most of these concepts and their terms will be pre-defined in all kinds of vocabularies but for brand-new use cases in a new domain concepts and their terms will have to be created. classDiagram direction RL class Concept { - type : ConceptType } class UseCase { - vocabulary: Vocabulary - stories: Story[] } link UseCase \"../use-case/\" UseCase --> UseCase : requires Vocabulary \"*\" --> \"*\" Concept Vocabulary \"*\" --> \"*\" Term Story --> \"*\" Concept : input Story --> \"*\" Concept : output Term --> \"1..*\" Concept %% Concept --> OntologyAxiom Vocabulary <--> Concept UseCase --> \"1..*\" Story Persona --|> Concept Concept --> Concept : broader Concept --> Term : preferred UseCase --> \"1\" Vocabulary : use case vocabulary","title":"Concept"},{"location":"concept/dataset/","text":"Dataset \u00b6","title":"Dataset"},{"location":"concept/dataset/#dataset","text":"","title":"Dataset"},{"location":"concept/outcome/","text":"Outcome \u00b6","title":"Outcome"},{"location":"concept/outcome/#outcome","text":"","title":"Outcome"},{"location":"concept/persona/","text":"Persona \u00b6","title":"Persona"},{"location":"concept/persona/#persona","text":"","title":"Persona"},{"location":"concept/story/","text":"Story \u00b6","title":"Story"},{"location":"concept/story/#story","text":"","title":"Story"},{"location":"concept/use-case/","text":"Use Case \u00b6 A Use Case specifies a distinct set of business requirements \u2014 captured as an \"executable model\" \u2014 resulting in a specific business outcome. Life cycle \u00b6 Use Cases go through a life-cycle of continuous improvement such as: 1 journey title Use Case Life Cycle section Plan Discovery: 5: Business, Analyst Negotiation: 2: Business, Owner, Analyst Agreed: 5: Business, Owner section Build Implementation: 1: Analyst, Ontologist, Engineer Acceptance Test: 3: Owner Delivered: 4: Engineer section Run Deployed: 5: DevOps Decommissioned: 1: DevOps Key components \u00b6 For every Use Case we specify: A name and a description The desired or expected business outcome(s) and how they can be measured The \"personas\" of all the people and systems that are involved in the domain or scope represented by the Use Case The concepts and their terms as they're used in the context of the Use Case At a later stage in the life-cycle of the Use Case we add: The stories, see Story The datasets and their ontologies The workflows Specialists of various disciplines in the organization can add their details such as: detailed business rationale, tied to the before-mentioned business outcomes milestones, versions, projects, timelines, roadmaps, budgets issues, tickets environment topologies, deployments and configurations detailed information about the various types of dependencies Tech Audience \u00b6 The term \"use case\" means something specific to a technical audience who usually assume that the term use case means what the Object Management Group (OMG) defines what it is in their Unified Modeling Language (UML) and its \"use case diagrams\" . Although there are many similarities and overlap \u2014 which is why we are repurposing the term \u2014 it is not exactly the same, in our Use Case Tree Method: use cases often are used a much broader and more abstract container concept \u2014 compared to a UML Use Case \u2014 that can be put in a \"tree structure\" where at the highest levels of these trees a use case can represent a capability domain or a \"strategic use case\" \u2014 or basically anything that fits well with the business. at the lowest levels in this tree we would end up with use cases that are much more like turn-key components for the EKG, 100% reusable delivering \"no code\"-functionality 1 . No-code or Low-code development allows non-programmers to create applications without hard-wiring business logic with a programming language \u21a9 \u21a9","title":"Use Case"},{"location":"concept/use-case/#use-case","text":"A Use Case specifies a distinct set of business requirements \u2014 captured as an \"executable model\" \u2014 resulting in a specific business outcome.","title":"Use Case"},{"location":"concept/use-case/#life-cycle","text":"Use Cases go through a life-cycle of continuous improvement such as: 1 journey title Use Case Life Cycle section Plan Discovery: 5: Business, Analyst Negotiation: 2: Business, Owner, Analyst Agreed: 5: Business, Owner section Build Implementation: 1: Analyst, Ontologist, Engineer Acceptance Test: 3: Owner Delivered: 4: Engineer section Run Deployed: 5: DevOps Decommissioned: 1: DevOps","title":"Life cycle"},{"location":"concept/use-case/#key-components","text":"For every Use Case we specify: A name and a description The desired or expected business outcome(s) and how they can be measured The \"personas\" of all the people and systems that are involved in the domain or scope represented by the Use Case The concepts and their terms as they're used in the context of the Use Case At a later stage in the life-cycle of the Use Case we add: The stories, see Story The datasets and their ontologies The workflows Specialists of various disciplines in the organization can add their details such as: detailed business rationale, tied to the before-mentioned business outcomes milestones, versions, projects, timelines, roadmaps, budgets issues, tickets environment topologies, deployments and configurations detailed information about the various types of dependencies","title":"Key components"},{"location":"concept/use-case/#tech-audience","text":"The term \"use case\" means something specific to a technical audience who usually assume that the term use case means what the Object Management Group (OMG) defines what it is in their Unified Modeling Language (UML) and its \"use case diagrams\" . Although there are many similarities and overlap \u2014 which is why we are repurposing the term \u2014 it is not exactly the same, in our Use Case Tree Method: use cases often are used a much broader and more abstract container concept \u2014 compared to a UML Use Case \u2014 that can be put in a \"tree structure\" where at the highest levels of these trees a use case can represent a capability domain or a \"strategic use case\" \u2014 or basically anything that fits well with the business. at the lowest levels in this tree we would end up with use cases that are much more like turn-key components for the EKG, 100% reusable delivering \"no code\"-functionality 1 . No-code or Low-code development allows non-programmers to create applications without hard-wiring business logic with a programming language \u21a9 \u21a9","title":"Tech Audience"},{"location":"objective/","text":"Index \u00b6 The primary reasons for creating a Use Case Tree are: Know what the Business wants Bridge the Gap Manage Expectations Enable Reuse Avoid \"boiling the ocean\" Capture Knowledge Avoid Disruption Increase Quality","title":"Index"},{"location":"objective/#index","text":"The primary reasons for creating a Use Case Tree are: Know what the Business wants Bridge the Gap Manage Expectations Enable Reuse Avoid \"boiling the ocean\" Capture Knowledge Avoid Disruption Increase Quality","title":"Index"},{"location":"objective/avoid-boiling-the-ocean/","text":"Avoid \"boiling the ocean\" \u00b6 Avoids \u201dboiling the ocean\u201d because the Use Case Tree and its individual use cases define an agreed scope at the detail level (without becoming technical). Provides focus for the Center of Excellence (CoE), \u201dcranking out\u201d use cases one by one Ontology development will be focussed on delivering on the requirements (user stories and concepts) of the agreed use cases rather than ending up in philosophical exercise.","title":"No boiling ocean"},{"location":"objective/avoid-boiling-the-ocean/#avoid-boiling-the-ocean","text":"Avoids \u201dboiling the ocean\u201d because the Use Case Tree and its individual use cases define an agreed scope at the detail level (without becoming technical). Provides focus for the Center of Excellence (CoE), \u201dcranking out\u201d use cases one by one Ontology development will be focussed on delivering on the requirements (user stories and concepts) of the agreed use cases rather than ending up in philosophical exercise.","title":"Avoid \"boiling the ocean\""},{"location":"objective/avoid-disruption/","text":"Avoid Disruption \u00b6 Capturing all knowledge in the organization as much as technically possible is not only useful to enable a whole new league of use cases but is also a necessity since all of these use cases are served by one platform \u2014 albeit distributed and federated. Which means that there will be many stakeholders with different agendas that would not care \u2014 nor should they have to care \u2014 about the wishes of the stakeholders in other use cases. However, updates to one use case could potentially also affect other use cases. That's why: all changes & updates have to be done gradually, no \u201dbig bang\u201d releases and all inter-dependencies need to be really clear and tested, in-full, automatically and continuously. So, for instance, when some sub-use case of a high-level use case is also used in another high-level use case then a change that serves the needs of one could potentially also affect the other and its users. That's why we need the Use Case Tree, to allow us to avoid any disruption across the board.","title":"Avoid Disruption"},{"location":"objective/avoid-disruption/#avoid-disruption","text":"Capturing all knowledge in the organization as much as technically possible is not only useful to enable a whole new league of use cases but is also a necessity since all of these use cases are served by one platform \u2014 albeit distributed and federated. Which means that there will be many stakeholders with different agendas that would not care \u2014 nor should they have to care \u2014 about the wishes of the stakeholders in other use cases. However, updates to one use case could potentially also affect other use cases. That's why: all changes & updates have to be done gradually, no \u201dbig bang\u201d releases and all inter-dependencies need to be really clear and tested, in-full, automatically and continuously. So, for instance, when some sub-use case of a high-level use case is also used in another high-level use case then a change that serves the needs of one could potentially also affect the other and its users. That's why we need the Use Case Tree, to allow us to avoid any disruption across the board.","title":"Avoid Disruption"},{"location":"objective/bridge-the-gap/","text":"Bridge the traditional gap between Business & Technology \u00b6 Engage with the business, the product owner and get continuous buy-in from the product owner during the life-cycle of the agreed use cases. But not only with the product owner of the direct use case being developed but also show to the business what other future needs need to be considered. For instance, if one use case e.g. \"Legal Entities\" needs \"workflows\", would it make sense to invest a bit more effort to then create a reusable workflow component that can also be used for many other use cases such as \"Shareholding disclosure\"? Yes, the customer is always right but the Use Case Tree shows to the customer that there are many other customers (or future customers, in and outside the organization even) and why it makes sense to prioritize reuse and how that not only could deliver more quality but also create more buy-in from peer stakeholders across the firm or even across the industry. In other words, do not select one product owner to be the single stakeholder but also get other stakeholders of neighboring or higher level use cases in the room, their requirements may influence the reuse agenda and therefore the roadmap. It may sound paradoxal but investing in reuse will not slow things down but speed things up.","title":"Bridge the Gap"},{"location":"objective/bridge-the-gap/#bridge-the-traditional-gap-between-business-technology","text":"Engage with the business, the product owner and get continuous buy-in from the product owner during the life-cycle of the agreed use cases. But not only with the product owner of the direct use case being developed but also show to the business what other future needs need to be considered. For instance, if one use case e.g. \"Legal Entities\" needs \"workflows\", would it make sense to invest a bit more effort to then create a reusable workflow component that can also be used for many other use cases such as \"Shareholding disclosure\"? Yes, the customer is always right but the Use Case Tree shows to the customer that there are many other customers (or future customers, in and outside the organization even) and why it makes sense to prioritize reuse and how that not only could deliver more quality but also create more buy-in from peer stakeholders across the firm or even across the industry. In other words, do not select one product owner to be the single stakeholder but also get other stakeholders of neighboring or higher level use cases in the room, their requirements may influence the reuse agenda and therefore the roadmap. It may sound paradoxal but investing in reuse will not slow things down but speed things up.","title":"Bridge the traditional gap between Business &amp; Technology"},{"location":"objective/capture-knowledge/","text":"Capture Knowledge \u00b6 The Use Case Tree Provides a \"map\" of all knowledge, data and functionality that the EKG provides to the enterprise. Enabling a whole new league of use cases.","title":"Capture Knowledge"},{"location":"objective/capture-knowledge/#capture-knowledge","text":"The Use Case Tree Provides a \"map\" of all knowledge, data and functionality that the EKG provides to the enterprise. Enabling a whole new league of use cases.","title":"Capture Knowledge"},{"location":"objective/enable-reuse/","text":"Enable Reuse \u00b6 The Use Case Tree is a foundational mechanism to create an ecosystem of reusable components for the EKG.","title":"Enable Reuse"},{"location":"objective/enable-reuse/#enable-reuse","text":"The Use Case Tree is a foundational mechanism to create an ecosystem of reusable components for the EKG.","title":"Enable Reuse"},{"location":"objective/increase-quality/","text":"Increase Quality \u00b6 The Use Case Tree is a foundational structure for quality \u2014 any kind of quality \u2014 since it enforces, requires and enables 100% test coverage based on real business scenarios and requirements. A use case has a life-cycle that starts with a name and a description and ends 1 with a fully detailed model of all related concepts, personas, business outcomes, datasets, ontologies, user stories and dependencies. That model is all captured in the EKG itself which allows the EKG to not only fully and thoroughly test things during development time (build phase) but also in production (run phase). Which provides the level of quality that an EKG needs to have to become truly able to support enterprise level strategic use cases. Obviously, use cases can also be decommissioned after their life in producton so in fact there are more stages in the life-cycle of a use case \u21a9","title":"Increase Quality"},{"location":"objective/increase-quality/#increase-quality","text":"The Use Case Tree is a foundational structure for quality \u2014 any kind of quality \u2014 since it enforces, requires and enables 100% test coverage based on real business scenarios and requirements. A use case has a life-cycle that starts with a name and a description and ends 1 with a fully detailed model of all related concepts, personas, business outcomes, datasets, ontologies, user stories and dependencies. That model is all captured in the EKG itself which allows the EKG to not only fully and thoroughly test things during development time (build phase) but also in production (run phase). Which provides the level of quality that an EKG needs to have to become truly able to support enterprise level strategic use cases. Obviously, use cases can also be decommissioned after their life in producton so in fact there are more stages in the life-cycle of a use case \u21a9","title":"Increase Quality"},{"location":"objective/know-what-the-business-wants/","text":"Know what the business wants \u00b6 Know exactly what the business \u2014 i.e. the customer or product owner \u2014 really needs, short-, mid- and long-term. Plan phase: Discover the business opportunities & business needs One of the tasks during the planning phase of any new initiative \u2014 or iteration \u2014 is to \"Discover\" the business opportunities & needs: In non-technical terms. Without assuming anything about existing systems and \"how things are done today\". Translate to \"pure\" functional requirements \u2014 and \"nice to haves\". Looking broad horizontally, thinking ahead. Mile wide, inch deep at this stage. Let the business \"dream a little\" about \"what could be\" and \"what should be\", so that future needs can be identified and communicated \u2014 without necessarily committing to them (yet). Promote \"thinking outside the box\", encourage people to not make any assumptions about what is technically possible or not \u2014 so often these assumptions unknowingly keep the bar lower than it could be. Build phase: Translate requirements into an easy to understand model i.e. the Use Case Tree \"Contract with the business\" i.e. the budget holder or product owner. Every major change to any given use case in the Use Case Tree will have to be signed off by the appropriate product owner. Capture it as \"meta-data\" that will be part of the EKG \u2014 all the way to production. Capture it in such a way that \"everything that we ever do\" is always directly or indirectly relatable to a use case in the Use Case Tree. The business never loses sight on what happens with their budget and agreed deliverables. All reporting to the business occurs in the context of the agreed , even after delivery.","title":"Know what the business wants"},{"location":"objective/know-what-the-business-wants/#know-what-the-business-wants","text":"Know exactly what the business \u2014 i.e. the customer or product owner \u2014 really needs, short-, mid- and long-term. Plan phase: Discover the business opportunities & business needs One of the tasks during the planning phase of any new initiative \u2014 or iteration \u2014 is to \"Discover\" the business opportunities & needs: In non-technical terms. Without assuming anything about existing systems and \"how things are done today\". Translate to \"pure\" functional requirements \u2014 and \"nice to haves\". Looking broad horizontally, thinking ahead. Mile wide, inch deep at this stage. Let the business \"dream a little\" about \"what could be\" and \"what should be\", so that future needs can be identified and communicated \u2014 without necessarily committing to them (yet). Promote \"thinking outside the box\", encourage people to not make any assumptions about what is technically possible or not \u2014 so often these assumptions unknowingly keep the bar lower than it could be. Build phase: Translate requirements into an easy to understand model i.e. the Use Case Tree \"Contract with the business\" i.e. the budget holder or product owner. Every major change to any given use case in the Use Case Tree will have to be signed off by the appropriate product owner. Capture it as \"meta-data\" that will be part of the EKG \u2014 all the way to production. Capture it in such a way that \"everything that we ever do\" is always directly or indirectly relatable to a use case in the Use Case Tree. The business never loses sight on what happens with their budget and agreed deliverables. All reporting to the business occurs in the context of the agreed , even after delivery.","title":"Know what the business wants"},{"location":"objective/manage-expectations/","text":"Best form of \u201dexpectation management\u201d \u00b6 Creating an agreed and realistic strategic roadmap.","title":"Manage Expectations"},{"location":"objective/manage-expectations/#best-form-of-expectation-management","text":"Creating an agreed and realistic strategic roadmap.","title":"Best form of \u201dexpectation management\u201d"},{"location":"product/","text":"Products \u00b6 Use cases can be modelled and be made part of the Enterprise Knowledge Graph by loading these models in one of the backend semantic graph databases. For any given use case, there are one or more stories where each story can be executed via some protocol, for instance via HTTP as a REST-API or a WebSocket message. This is what products like agnos.ai's Story Service does: it serves the stories of your use case. Before you deploy your use case to a production environment you want to know whether your use case and all its stories have the right expected quality. In other words, your stories need to be tested. This is where agnos.ai's product RDChoke comes in, it tests all your stories for a given set of use cases against any of the supported backend data stores.","title":"Products"},{"location":"product/#products","text":"Use cases can be modelled and be made part of the Enterprise Knowledge Graph by loading these models in one of the backend semantic graph databases. For any given use case, there are one or more stories where each story can be executed via some protocol, for instance via HTTP as a REST-API or a WebSocket message. This is what products like agnos.ai's Story Service does: it serves the stories of your use case. Before you deploy your use case to a production environment you want to know whether your use case and all its stories have the right expected quality. In other words, your stories need to be tested. This is where agnos.ai's product RDChoke comes in, it tests all your stories for a given set of use cases against any of the supported backend data stores.","title":"Products"}]}