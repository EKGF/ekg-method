{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Your enterprise embarked upon a strategic innovative journey towards  establishing a full scale Enterprise Knowledge Graph (EKG) in order  to be able to:</p> <ol> <li>implement use cases that enable more foundational data quality     for your enterprise\u2019s business processes,</li> <li>be more easily compliant with regulations and</li> <li>enable strategic use cases that create a competitive advantage.</li> </ol> <p>The key artifact in the development of an EKG is \"the Use Case Tree\":</p> <ul> <li> <p>The Use Case Tree is the EKG's equivalent of a long term   data strategy and business capability plan.</p> </li> <li> <p>The Use Case Tree is the high-level requirements overview,    scoping and dependency model.   It gives a mile wide, inch deep view of business capabilities.</p> </li> </ul> <p>Traditionally, data strategy, architecture and models i.e. specifications of business requirements on one side and technology and software, i.e. functionality on the other side, are separate. They are concerns of different departments; different groups of specialists think about these concepts in their own way and have their own practices and models for it.  For any given development of a business capability that is supported  by technology, different groups of people, often across many departments, will get involved and they all have their own way of looking at it. There is no shared language, not one single artifact that they can  all talk to and reason about. The Use Case Tree is that single artifact.  It provides one single construct, owned by the business, and  primarily driven by business strategy, that every group of people,  every specialist, can relate their way of thinking to.  This includes not only data and technology specialists but also project managers, financial managers, security and compliance officers, operations engineers and so forth.  All their models and different ways of looking at a given capability  can be plugged into the Use Case Tree as different views.</p> <p>Everything we ever do in a business, especially in the data and technology pillars of that enterprise, should be related to a use case in the Use Case Tree.</p> <p>The Use Case Tree is a breakdown of strategic planned-for  capabilities into smaller building blocks, all called use cases. Strategic long term use cases such as Enterprise Risk Management  or Client 360 are broken down into smaller use cases that  can (and should) be done first.</p> <p>Each use case is a module \u2014 an EKG-component so you will \u2014  a building block with which other use cases can be constructed.</p> <p>The Use Case Tree Method is a practice that has been developed and used for many EKG use cases that are running in production.</p>  <p>The primary reasons for creating a Use Case Tree are:</p> <ol> <li>Know what the Business wants</li> <li>Bridge the Gap</li> <li>Manage Expectations</li> <li>Enable Reuse</li> <li>Avoid \"boiling the ocean\"</li> <li>Capture Knowledge</li> <li>Avoid Disruption</li> <li>Increase Quality</li> </ol>","title":"Use Case Tree Method"},{"location":"concept/concept/","text":"<p>For every given Use Case we want to start with capturing the concepts and terms that the user or \"the business\" uses or wants to use.</p> <p>Most of these concepts and their terms will be pre-defined in all kinds of vocabularies but for brand-new use cases in a new domain concepts and their terms will have to be created.</p>","title":"Concept"},{"location":"concept/dataset/","text":"","title":"Dataset"},{"location":"concept/outcome/","text":"","title":"Outcome"},{"location":"concept/persona/","text":"Business AudienceData &amp; Tech AudienceModel   <p>For any given Use Case we need to have a list of all the different types of players. In the initial stages of the life cycle of a use case it is less relevant whether these players are called Stakeholders, Actors, Roles, User Types or Systems, we simply need to know what terms the actual users, the real customer(s) of the use case, are using for them in their daily practice.</p> <p>We call them Personas.</p> <p>For example, in the use case \"Legal Entity Management\" you would have Personas like:</p> <ul> <li>Auditor</li> <li>Data Owner</li> <li>Shareholder</li> <li>Director</li> <li>Signator<ul> <li>Signator Power Pursuent to Commercial Register</li> </ul> </li> <li>Board Member</li> <li>Legal Council</li> <li>Liquidator</li> <li>...</li> </ul> <p>Many of these Personas are involved in multiple use cases and are grouped together in persona taxonomies and defined in ontologies with \"machine readable meaning\" that can be used to let algorithms \"understand\" the actual context and act upon it.</p>   <p>In traditional use case modelling people use the term Actor rather than Persona. The term Actor is also used in a TOGAF Metamodel and combined with the term Role whereby an actor  assumes a role to perform a task.</p> <p>The Use Case Tree Method does not make that distinction, primarily to keep things as simple as possible when capturing requirements \u2014 primarily as stories \u2014 but also because the term Persona combines both concepts into one whereby:</p> <ul> <li>Actors assuming a Role is fully automated, context dependent, model-, rule- and policy-driven</li> <li>Personas are Concepts tied to Ontology-defined Classes that can inherit from other Persona types</li> <li>Personas are not just the \"users\" (or systems) of the use case but also any other party in the related   data-models (or EKG models/ontologies). For instance, your user can have the persona \"Legal Entity Maintainer\"   but since the legal entity can have a Director as well, the Director is also a Persona, even when that   Director might never be an active user of the system.</li> </ul>     <p>A subset of the model, as a UML Class Diagram, around Persona.</p> <p></p>","title":"Persona"},{"location":"concept/story/","text":"<p>A Story \u2014 in the context of a Use Case in the Use Case Tree \u2014 defines a business requirement.</p> <p>A business user could specify a requirement as follows:</p> <ul> <li>As the Chief Risk Officer, I need to know our current Risk Position against party B, so that I can Assess the Risk</li> <li>As an Auditor, I need to get a list of all current board members of legal entity X, so that I can Verify Stakeholders</li> <li>As an Employee, I need to get a list of all my colleagues in my unit, so that I Know my Colleagues</li> <li>As a customer, I need to get a list of all products, so that I can make a product selection</li> </ul> <p>And so forth. That's all we ask.</p> <p>=== Business &amp; Management Audience</p> <p>=== Data &amp; Tech Audience</p>","title":"Story"},{"location":"concept/use-case/","text":"<p>A Use Case specifies a distinct set of business requirements \u2014 captured as an \"executable model\" \u2014 resulting in a specific business outcome.</p> Business &amp; Management AudienceData &amp; Tech Audience","title":"Use Case"},{"location":"concept/use-case/#process","text":"<p>Ideas for use cases could come from any person in the organization at any point in time. We want all these ideas to end up in the organization's Use Case Tree, whether they are viable or not. If an idea for a given use case is rejected then show the rationale for that to everyone so that everyone can learn, and we're not wasting any time on that idea again. </p> <p>Let people contribute. All knowledge workers, all specialist users, data architects, technical architects, ontologists, end users, business executives, literally anyone should be allowed to understand:</p> <ul> <li>what's our business identity? Our mission and strategy?</li> <li>how does that map to our current and future data and technology landscape?</li> <li>(without becoming too technical or detailed, we want everyone to be able to chip in)</li> <li>how does our \"technical debt\" fit in? (identify the functionality of our technical debt as use cases in the tree as well)</li> <li>how are we going to \"rationalise\" our current siloed landscape (and technical debt)?</li> <li>what are the short and long term priorities?</li> <li>what are the milestones and the roadmap?</li> <li>which ideas (for use cases) have been proposed, considered approved or rejected and why?</li> </ul> <p></p>","title":"Process"},{"location":"concept/use-case/#life-cycle","text":"<p>Each individual Use Case itself goes through a life-cycle of continuous improvement like:1</p> <p></p>","title":"Life cycle"},{"location":"concept/use-case/#key-components","text":"<p>For every Use Case we specify:</p> <ul> <li>A name and a description</li> <li>The desired or expected business outcome(s) and how they can be measured</li> <li>The \"personas\" of all the people and systems that are involved   in the domain or scope represented by the Use Case</li> <li>The concepts and their terms as they're used in the context of the Use Case</li> </ul> <p>At a later stage in the life-cycle of the Use Case we add:</p> <ul> <li>The stories, see Story</li> <li>The datasets and their ontologies</li> <li>The workflows</li> </ul> <p>Specialists of various disciplines in the organization can add their details such as:</p> <ul> <li>detailed business rationale, tied to the before-mentioned business outcomes</li> <li>milestones, versions, projects, timelines, roadmaps, budgets</li> <li>issues, tickets</li> <li>environment topologies, deployments and configurations</li> <li>detailed information about the various types of dependencies</li> </ul>   <p>The term \"use case\" means something specific to a technical audience who usually assume that the term use case means what the Object Management Group (OMG) defines what it is in their Unified Modeling Language (UML) and its \"use case diagrams\".</p> <p>Although there are many similarities and overlap \u2014 which is why we are repurposing the term \u2014 it is not exactly the same, in our Use Case Tree Method:</p> <ul> <li>use cases often are used a much broader and more abstract container concept \u2014   compared to a UML Use Case \u2014 that can be put in a \"tree structure\" where at the   highest levels of these trees a use case can represent a capability domain or    a \"strategic use case\" \u2014 or basically anything that fits well with the business.</li> <li>at the lowest levels in this tree we would end up with use cases that are much more   like turn-key components for the EKG, 100% reusable delivering \"no code\"-functionality2.</li> </ul>","title":"Key components"},{"location":"concept/use-case/#similar-concepts","text":"","title":"Similar Concepts"},{"location":"concept/use-case/#packaged-business-capabilities","text":"<ul> <li>WalkMe - Packaged Business Capabilities (PBCs)</li> <li>ElasticPath - What Are Packaged Business Capabilities (PBCs)?</li> </ul>   <ol> <li> <p>the life-cycle diagram shown is obviously a simplification\u00a0\u21a9</p> </li> <li> <p>No-code or    Low-code development   allows non-programmers to create applications without   hard-wiring business logic with a programming language\u00a0\u21a9</p> </li> </ol>","title":"Packaged Business Capabilities"},{"location":"objective/","text":"<p>The primary reasons for creating a Use Case Tree are:</p> <ol> <li>Know what the Business wants</li> <li>Bridge the Gap</li> <li>Manage Expectations</li> <li>Enable Reuse</li> <li>Avoid \"boiling the ocean\"</li> <li>Capture Knowledge</li> <li>Avoid Disruption</li> <li>Increase Quality</li> </ol>","title":"Index"},{"location":"objective/align-with-business-strategy/","text":"<p>Creating an agreed and realistic strategic roadmap that is aligned to business strategy is hard. Most \u2014 if not all \u2014 large enterprises are complex and consist of many lines of business (LOBs) where each business has its own \"business identity\" and therefore its own long term strategy. Each of these organizational divisions has its own agenda.</p> <p>The Use Case Tree is the single artifact that all lines of business can talk to. </p>","title":"Align with Business Strategy"},{"location":"objective/align-with-business-strategy/#business-capability-map","text":"<p>At the highest levels, the Use Case Tree will end up being identical or almost identical to a business capability map.</p> <p>Here's an example of a simplified capability map of an insurance company  (taken from the article mentioned as source 1 below):</p> <p></p> <p>Most large organizations have an Enterprise Architecture or Business Architecture department that works on these models but in many cases:</p> <ul> <li>these capability maps are just maintained as pictures or spreadsheets and therefore<ul> <li>often out of sync with reality</li> <li>not really fully ingrained in the hearts and minds of the workforce</li> </ul> </li> <li>they are usually:<ul> <li>not represented in production-level systems and if they are then they are:</li> <li>not represented in user interfaces (text may look the same but doesn't dynamically change when the capability map changes)</li> <li>not represented in APIs (parameters, returned data structures etc) </li> <li>not represented in data models</li> </ul> </li> <li>they have bad linkage with similar hierarchical structures such as:<ul> <li>the organizational unit structure and reporting lines</li> <li>the product and services catalog</li> <li>the actual business processes</li> <li>the actual internal data, technology, products and services supply chains </li> </ul> </li> </ul>","title":"Business Capability Map"},{"location":"objective/align-with-business-strategy/#next-level-capability-map","text":"<p>The Use Case Tree serves as the next level in Business Capability Mapping where each capability gets broken down into smaller capabilities each of which ends up as an executable model \u2014 or component or model so you will \u2014 in the EKG itself.</p>","title":"Next-level Capability Map"},{"location":"objective/align-with-business-strategy/#sources","text":"<ol> <li>Marc Lankhorst, Sven van Dijk, What are Business Capabilities &amp; How to Identify them?</li> <li>Business Capability Models: Why You Might Be Missing Out on Better Business Outcomes</li> </ol>","title":"Sources"},{"location":"objective/avoid-boiling-the-ocean/","text":"<p>Avoids \"boiling the ocean\" because the Use Case Tree and its individual use cases define an agreed scope at the detail level (without becoming technical).</p> <ul> <li>Provides focus for the Center of Excellence (CoE), \"cranking out\" use cases one by one,   according to the agreed roadmap.</li> <li>Ontology development will be focussed on delivering on the requirements (user stories and   concepts) of the agreed use cases rather than ending up in philosophical exercise.</li> </ul>","title":"Avoid \"boiling the ocean\""},{"location":"objective/avoid-disruption/","text":"<p>Capturing all knowledge in the organization as much as technically possible is not only useful to enable a whole new league of use cases but is also a necessity since all of these  use cases are served by one platform \u2014 albeit distributed and federated. Which means that there will be many stakeholders with different agendas that would not care \u2014 nor should they have to care \u2014 about the wishes  of the stakeholders in other use cases.</p> <p>However, updates to one use case could potentially also affect other use cases.</p> <p>That's why:</p> <ul> <li>all changes &amp; updates have to be done gradually,   no \u201dbig bang\u201d releases and</li> <li>all inter-dependencies need to be really clear and   tested, in-full, automatically and continuously.</li> </ul> <p>So, for instance, when some sub-use case of a high-level use case is also used in another high-level use case then a change that serves the needs of one could potentially also affect the other and its users. That's why we need the Use Case Tree, to allow us to avoid any disruption across the board.</p>","title":"Avoid Disruption"},{"location":"objective/bridge-the-gap/","text":"<ul> <li> <p>Engage with the business, the product owner and get continuous   buy-in from the product owner during the life-cycle of the   agreed use cases.</p> </li> <li> <p>But not only with the product owner of the direct use case being   developed but also show to the business what other future needs   need to be considered.   For instance, if one use case e.g. \"Legal Entities\" needs   \"workflows\", would it make sense to invest a bit more effort   to then create a reusable workflow component that can also    be used for many other use cases such as    \"Shareholding disclosure\"?</p> </li> <li> <p>Yes, the customer is always right but the Use Case Tree    shows to the customer that there are many other customers   (or future customers, in and outside the organization even)   and why it makes sense to prioritize reuse and how that not    only could deliver more quality but also create more buy-in    from peer stakeholders across the firm or even across the    industry.</p> <ul> <li>In other words, do not select one product owner to be the   single stakeholder but also get other stakeholders of   neighboring or higher level use cases in the room, their   requirements may influence the reuse agenda and therefore   the roadmap. It may sound paradoxal but investing in reuse   will not slow things down but speed things up.</li> </ul> </li> </ul>","title":"Bridge the traditional gap between Business &amp; Technology"},{"location":"objective/capture-knowledge/","text":"<p>The Use Case Tree Provides a \"map\"1 of all knowledge, data and  functionality that the EKG provides to the enterprise. Enabling a whole new league of use cases.</p>   <ol> <li> <p>See also Align with Business Strategy: Business Capability Maps \u21a9</p> </li> </ol>","title":"Capture Knowledge"},{"location":"objective/enable-reuse/","text":"<p>The Use Case Tree is a foundational mechanism to create an ecosystem of  reusable components for the EKG.</p>","title":"Enable Reuse"},{"location":"objective/increase-quality/","text":"<p>The Use Case Tree is a foundational structure for quality  \u2014 any kind of quality \u2014  since it enforces, requires and enables 100% test coverage  based on real business scenarios and requirements.</p> <ul> <li>A use case has a life-cycle that starts with a name and a   description and ends1 with a fully detailed model of all   related concepts, personas, business outcomes, datasets,   ontologies, user stories and dependencies.   That model is all captured in the EKG itself which allows the   EKG to not only fully and thoroughly test things during   development time (build phase) but also in production   (run phase).   Which provides the level of quality that an EKG needs to   have to become truly able to support enterprise level   strategic use cases.</li> </ul>   <ol> <li> <p>Obviously, use cases can also be decommissioned after their life in producton so in fact there are more stages in the life-cycle of a use case\u00a0\u21a9</p> </li> </ol>","title":"Increase Quality"},{"location":"objective/know-what-the-business-wants/","text":"<p>Know exactly what the business \u2014 the customer or product owner \u2014 really needs, short-, mid- and long-term.</p>","title":"Know what the business wants &amp; why"},{"location":"objective/know-what-the-business-wants/#plan-phase","text":"<p>One of the tasks during the planning phase of any new initiative \u2014 or iteration \u2014 is to \"Discover\" the business opportunities &amp; needs:</p> <ul> <li> <p>In non-technical terms. No screen designs, no data models, just plain English.</p> </li> <li> <p>Without assuming anything about existing systems and \"how   things are done today\".</p> </li> <li> <p>Translate to \"pure\" functional requirements \u2014 and \"nice   to haves\".</p> </li> <li> <p>Looking broad horizontally, thinking ahead. Mile wide, inch   deep at this stage.</p> </li> <li> <p>Let the business \"dream a little\" about \"what could be\"   and \"what should be\", so that future needs can be   identified and communicated \u2014 without necessarily   committing to them (yet).</p> </li> <li> <p>Promote \"thinking outside the box\", encourage people to   not make any assumptions about what is technically possible   or not \u2014 so often these assumptions unknowingly keep the   bar lower than it could be.</p> </li> <li> <p>Continuously improve, new insights occur all the time, have one   \"living\" shared data structure \u2014 the Use Case Tree \u2014 that gets   continuously updated with the latest insights even while parts   of that Use Case Tree are already running in production or still   worked on.</p> </li> <li> <p>Business clearly decides which strategic use case(s) -- in the tree \u2014    has/have priority. Capture these priority settings and use them to   derive the right implementation order of use cases, determine    \u2014 with the business \u2014 the shortest path to delivering on the   specified business outcomes.</p> </li> </ul>","title":"Plan Phase"},{"location":"objective/know-what-the-business-wants/#build-phase","text":"<p>Once a roadmap has been agreed, which is \"the contract with the business\"  i.e. the budget holder or product owner, implementation of the first use case on the given roadmap can commence.</p> <p>Implementation means, in the context of an EKG and from the viewpoint of the business:</p> <ul> <li>Specialists are adding details to the use cases that are on the roadmap.</li> <li>All effort will be visible. Anything that anyone does to implement a use cases   is directly or indirectly related to that use case and therefore trackable   and traceable providing full transparency to the business around:<ul> <li>progress, blockers</li> <li>cost, risk, raid log</li> </ul> </li> <li>The business never loses sight on what happens with their   budget and agreed deliverables.   All reporting to the business occurs in the context of   the agreed roadmap, even after delivery.</li> </ul>","title":"Build Phase"},{"location":"objective/know-what-the-business-wants/#run-phase","text":"<p>Ideally, at higher levels of operational maturity, changes get rolled out to production continuously and as frequently as possible so that any given update to production is as small and impact-free as possible.</p> <ul> <li>End users get to see results on a continuous basis and will be able to provide   immediate feedback in the expectation that their feedback will be heard and possibly   lead to improvements in the very short term (which keeps people much more engaged)</li> <li>There will never be any \"big bang deployments\" anymore. There's no need anymore   to send whole departments to training because of a giant new release, everything   goes gradually and people get used to it in a more natural way \u2014 boiling the frog    in cold water, thereby reducing the resistance to change and enabling a much   more engaged user community.</li> <li>End users will be able to relate their work directly to the appropriate use cases   as they are defined in the Use Case Tree because the Use Case Tree is part of the   EKG itself and advanced user interfaces can link to it. It describes the user's   domain in their own terms. Direct feedback loops to all relevant stakeholders   are therefore possible which yet again promotes collaboration, end user satisfaction,   reduces costs and avoids technologists building something that's wrong or will   never be used.</li> </ul>","title":"Run Phase"},{"location":"objective/manage-expectations/","text":"<p>Creating an agreed and realistic strategic roadmap that is aligned to business strategy is hard. Most \u2014 if not all \u2014 large enterprises are complex and consist of many lines of business where each business has its own \"business identity\" and therefore its own long term strategy. Each of these organizational divisions has its own agenda. How </p>","title":"Best form of \u201dexpectation management\u201d"},{"location":"objective/modularity/","text":"<p>The standard approach for large projects, such as nuclear  plants, ERP implementations, data-warehouses and subway systems,  is to build monolithical bespoke systems.  Subsequently, large investments need to be taken to even  start the project and the project won\u2019t deliver, in most cases,  any value until completion.  Even a project that is 95% complete, is often of no use to  anyone until it is delivered, such as in the case of a  nuclear plant.  This problem also increases the risk that the project may get out  of hand by requiring more time and budget while also failing  on fulfilling the original project expectations. Additionally, this approach offers little to no scalability potential.</p> <p>As a far more compelling approach, such large projects should, according to Flyvbjerg, be divided in smaller subprojects that can be tackled separately and where each should deliver value independently of the rest.</p>  Prof. Bent Flyvbjerg <p>   Prof. Bent Flyvbjerg   Professor Bent Flyvbjerg is the Executive Chairman of  Oxford Global Projects. He has 30+ years of experience as an advisor to government and business, including the US, UK, and Chinese governments, Fortune 500 companies,  and top consultancies. Flyvbjerg is the most cited scholar in the world on project management.  He is the first BT Professor and Inaugural Chair of  Major Programme Management at Oxford University and holds the  Villum Kann Rasmussen Professorship and Chair at the  IT University of Copenhagen.  He has received numerous honors and awards for his work on  better project management, including a knighthood and two  Fulbright Scholarships.  </p>  <p>Flyvbjerg uses Madrid\u2019s subway system as a mere example to illustrate  the value of this approach.  Manuel Melis Maynar was the person responsible for Madrid  subway extension which added 131 km of rail, 79 new stations.  This project started in 1995 and ended in 2003.  Nonetheless, this project was and is still considered as a  success story as it set records in terms of its speed and  costs compared to other similar projects took up to 10 or 20  years and cost much more that initially expected.  This radical difference stems from a number of decisions  that Melis\u2019 took before starting this project:</p> <ul> <li>No monuments: Monuments and other forms of signature    architecture can be found in many subway stations but they are    also associated with cost overruns and delays.    Therefore, Manuel decided not to include any in its 79    stations and each station may follow a predefined replicable   modular design based on well-proved construction methods.</li> <li>No new technology: Manuel avoided relying on new    construction techniques, tools or methods as they could add    risk to the project.    Instead, he relied on well-proved techniques, tools and    methods that had proved to deliver results fastly, cheaply,    safely, and at a high level of quality.</li> <li>Speed: Time is like a window as the bigger it is,    the more bad stuff can fly through it.    Manuel understood this as he determined that the project    needed to be delivered in incremental steps of 3-6 kilometers.   This may enable workers and him to get feedback after each    step and to foster positive learning.    In other projects, this may also make possible to deliver    value to customers as soon as possible. </li> </ul> <p>Using this megaproject and other successful ones such  Tesla\u2019s Gigafactory, Flyvbjerg identified the principles  behind scaling up in a smart way.  By smart way, he means starting from small beginning to a  large project through experimentation and relying on  essentially identical modules.  The opposite of this is to start on a massive scale with  a project that mainly uses bespoke components.  According to Flyvberg, the principles behind smart scale-ups  are the following:</p> <ul> <li>Speed: As stated by former Google\u2019s CEO, Eric Schmidt;   \u201cCreate a product, ship it, see how it does, design and    implement improvements, and push it back out.    Ship and iterate.   The companies that are the fastest at this process will win\u201d.    Speed is critical for companies not only to create momentum    but also to create a feedback loop between the company and    its environment to foster positive learning within companies.    Positive learning is defined by Flyvbjerg as; \u201clearning to    do things faster, better, and cheaper by doing the same    thing over and over, through replicated modules\u201d.    Additionally, tighter time frames result in more controllable   chunks of work whose budget and other estimates are easier   to calculate and are more reliable.</li> <li>Replicable modularity: By relying on rather high-quality   identical modules that can be assembled into a larger project,    project managers can foster positive learning that will result   in performance increases, lower project management risks and    in meeting the project expectations.    Additionally, working incremental steps also offers delivering   customer value without having to complete the whole project   first.   For example, Tesla\u2019s Gigafactory consists of different blocks   that can be operated once completed and that can start   producing batteries long before the whole Gigafactory has   been finished.   Lastly, relying on modules, whose value and workings have been   tested before, significantly lowers the risks associated to   bespoke solutions.</li> </ul> <p>Although these concepts are not new to many engineering fields,  they are rather new in the business world.  However, they have been gaining attention recently by consulting  companies such as Gartner with the so-called  Composable Business which means;  \u201ccreating an organization made from interchangeable  building blocks.\u201d  As stated by Gartner;  \u201cA composable business is architected for real-time  adaptability and resilience in the face of uncertainty.\u201d  In turn, other companies such as  WalkMe,  Elastic Path and Venture Leap consider packaged business capabilities as the  building blocks of composable businesses.</p>","title":"Modularity"},{"location":"objective/modularity/#sources","text":"<ul> <li>Oxford Global Projects Academy - Smart Scaling: Modularity &amp; Speed</li> <li>Bent Flyvbjerg, Harvard Business Review - Make Megaprojects More Modular</li> <li>Flyvbjerg, Bent, Make Megaprojects More Modular (October 19, 2021). Harvard Business Review, 2021, November-December Issue, pp. 58-63.</li> <li>Gartner Keynote: The Future of Business Is Composable</li> <li>Walkme - Packaged Business Capabilities (PBCs)</li> <li>ElasticPath - What are Packaged Business Capabilities?</li> <li>Venture Leap - The future is called \u201cPackaged Business Capabilities\u201d</li> </ul>","title":"Sources"},{"location":"objective/strategic-usecases/","text":"<p>TODO: The point to make here is how EKG can deliver use cases that cannot realistically be done today with other technologies</p>","title":"The ability to deliver strategic use cases"},{"location":"other/","text":"<p>The Enterprise Knowledge Graph Foundation is working on multiple initiatives that have lead to various websites:</p>","title":"Other"},{"location":"other/#ekgforg","text":"<p>The main website of the Foundation: https://ekgf.org</p>","title":"ekgf.org"},{"location":"other/#manifesto","text":"<p>The EKG Manifesto:  https://manifesto.ekgf.org,  this is a project that is being maintained in the GitHub repository  EKGF/ekg-manifesto.</p> <p>You're welcome to contribute.</p>","title":"Manifesto"},{"location":"other/#maturity-model","text":"<p>The Maturity Model for the Enterprise Knowledge Graph:  https://maturity-model.ekgf.org, this is a project that is being maintained in the GitHub repository  EKGF/ekg-mm.</p> <p>You're welcome to contribute.</p>","title":"Maturity Model"},{"location":"other/#catalog","text":"<p>All use cases from the community, their datasets and their ontologies: https://catalog.ekgf.org</p>","title":"Catalog"},{"location":"other/#use-case-tree-method","text":"<p>A proposal for a front-to-back method to support your EKG journey: https://use-case-tree-method.ekgf.org, this is a project that is being maintained in the GitHub repository EKGF/use-case-tree-method.</p> <p>You're welcome to contribute.</p>","title":"Use Case Tree Method"},{"location":"other/author/","text":"<p>This publication has been worked on by many people, some created direct content and some contributed by joining calls, reviewing documents etc.</p>","title":"Authors"},{"location":"other/author/carlos-tubbax/","text":"","title":"Carlos Tubbax"},{"location":"other/author/jacobus-geluk/","text":"","title":"Jacobus Geluk"},{"location":"product/","text":"<p>Use cases can be modelled and be made part of the Enterprise Knowledge Graph by loading these models in one of the backend semantic graph databases.</p> <p>For any given use case, there are one or more stories where each story can be executed via some protocol, for instance via HTTP as a REST-API or a WebSocket message. This is what products like agnos.ai's Story Service does:  it serves the stories of your use case.</p> <p>Before you deploy your use case to a production environment you want to know whether your use case and all its stories have the right expected quality. In other words, your stories need to be tested. This is where agnos.ai's product RDChoke comes in, it tests all your stories for a given set of use cases against any of the supported backend data stores.</p>","title":"Products"}]}